scale_x_date()
par(mfrow = c(1,2))
hist(temperature$mean_temperature_c, xlab = "Temperature (C)",
main = "Histogram of temperature")
hist(temperature$mean_temperature_c, freq = FALSE,
main = "Normal probability curve",
xlab = "Temperature (C)")
lines(density(temperature$mean_temperature_c, na.rm = TRUE), col = "red", lwd = 3)
# Function to calculate PDF
pdf_normal <- function(x, sd, u){
y <- (1 / (sd * sqrt(2 * pi))) * exp(-(((x - u)^2)/(2 * sd^2)))
return(y)
}
# Average
u <- mean(temperature$mean_temperature_c, na.rm = TRUE)
# Standard deviation
sd <- sd(temperature$mean_temperature_c, na.rm = TRUE)
prob <- pdf_normal(x = temperature$mean_temperature_c, sd = sd, u = u)
hist(temperature$mean_temperature_c, freq = FALSE, xlab = "Temperature (C)", main = "")
i <- order(temperature$mean_temperature_c)
lines(temperature$mean_temperature_c[i], prob[i], col = "orange", lwd = 2)
lines(density(temperature$mean_temperature_c, na.rm = TRUE), col = "red", lwd = 3)
legend("topright", c("Theoretical PDF", "Observed PDF"),
col = c("orange", "red"), lwd = 2, bty = "n"
)
par(mar = c(4, 4, 1, 2))
temp <- -100:100 # Vector of extreme temperatures
y <- pdf_normal(temp, sd, u)
plot(temp, y * 100,
type = "l", xlab = "Temperature (C)",
ylab = "Probability (%)", col = "red", lwd = 2
)
pdf_normal(-100, sd, u) * 100
pdf_normal(25, sd, u) * 100
hist(mtcars$qsec, freq = FALSE)
sd <- sd(mtcars$qsec)
u <- mean(mtcars$qsec)
pdf_normal(18, sd, u)
dnorm(18, mean = u, sd = sd)
# Poisson distribution function
pdf_poisson <- function(y, u){
prob <- (u^y * exp(-u)) / factorial(y)
return(prob)
}
pdf_poisson(y = 0, u = 2)
pdf_poisson(y = 0, u = 2) + pdf_poisson(y = 1, u = 2) +
pdf_poisson(y = 2, u = 2) + pdf_poisson(y = 3, u = 2)
dpois(0, 2) + dpois(1, 2) + dpois(2, 2) + dpois(3, 2)
x <- 0:10
y <- dpois(x, 2) * 100
plot(x, y, type = "l", xlab = "Number of email per day",
ylab = "Probability (%)",xaxs="i",yaxs="i", ylim = c(0, 30))
polygon(c(0, x[x <= 3], 3), c(0, y[x <= 3], 0), col = "cadetblue")
legend("topright", c("P(Y <= 3)"),
col = c("cadetblue"), pch = 22, pt.bg = c("cadetblue"),
bty = "n")
1 - dpois(0, 2) - dpois(1, 2) - dpois(2, 2) - dpois(3, 2)
x <- 0:10
y <- dpois(x, 2) * 100
plot(x, y,
type = "l", xlab = "Number of email per day",
ylab = "Probability (%)", xaxs = "i", yaxs = "i", ylim = c(0, 30)
)
polygon(c(x[x >= 4], 4), c(y[x >= 4], 0), col = "red")
polygon(c(0, x[x <= 4], 4), c(0, y[x <= 4], 0), col = "cadetblue")
legend("topright", c("P(Y < 4)", "P(Y >= 4)"),
col = c("cadetblue", "red"), pch = 22, pt.bg = c("cadetblue", "red"),
bty = "n"
)
par(mfrow = c(2,2), mar = c(4,4,2,1))
plot(0:10, dpois(0:10, 1), type = "h", xlab = "Y values", ylab = "Probability",
main = expression(paste(mu, "= 1")))
plot(0:10, dpois(0:10, 5), type = "h", xlab = "Y values", ylab = "Probability",
main = expression(paste(mu, "= 5")))
plot(0:40, dpois(0:40, 10), type = "h", xlab = "Y values", ylab = "Probability",
main = expression(paste(mu, "= 10")))
plot(50:150, dpois(50:150, 100), type = "h", xlab = "Y values", ylab = "Probability",
main = expression(paste(mu, "= 100")))
par(mfrow = c(2,2), mar = c(4,4,2,1))
plot(dnbinom(0:100, size = 1e05, mu = 100), type = "h", xlab = "Y values",
ylab = "Probability", main = expression(paste(mu, "= 100", " k = 1e05")))
plot(dnbinom(0:100, size = 1, mu = 100), type = "h", xlab = "Y values",
ylab = "Probability", main = expression(paste(mu, "= 100", " k = 1e05")))
plot(dnbinom(0:100, mu = 10, size = 10), type = "h", xlab = "Y values",
ylab = "Probability", main = expression(paste(mu, "= 10", " k = 10")))
plot(dnbinom(0:100, mu = 10, size = 1), type = "h", xlab = "Y values",
ylab = "Probability", main = expression(paste(mu, "= 10", " k = 1")))
par(mfrow = c(1,2))
plot(dnbinom(0:100, mu = 50, size = 10000), type = "h", xlab = "Y values",
ylab = "Probability",
main = expression(paste("Negative binomial ", mu, "= 50", " k = 10000")))
plot(dpois(0:100, 50), type = "h", xlab = "Y values",
ylab = "Probability", main = expression(paste("Poisson ", mu, "= 50")))
y <- seq(0.01, 10, length.out = 100)
plot(y, dgamma(y, shape = 6, rate = 2), type = "l", xlab = "Y values",
ylab = "Probability", main = expression(paste(mu, "= 12 ", nu, " = 6")))
pdf_binomial <- function(y, pi, N){
prob <- factorial(N) / (factorial(y) * factorial((N - y))) *
pi^y * (1 - pi)^(N - y)
return(prob)
}
# Prob of having 1 (head) with a success rate of 50% after 1 trial
pdf_binomial(1, pi = 0.5, N = 1)
prob <- pdf_binomial(1:10, pi = 0.5, N = 1:10)
plot(1:10, prob * 100, type = "h", ylab = "Probabilities (%)",
xlab = "Number of successive trial")
pdf_binomial(y = 8, pi = 0.5, N = 10)
pdf_binomial(y = 3, pi = 1/6, N = 4)
sum(pdf_binomial(y = 1:24, pi = 1/36, N = 24))
# The probability of failing (i.e. 0 success)
pdf_binomial(y = 0, pi = 1/36, N = 24)
# Then the probability of success 1, 2, 3, ...
1 - pdf_binomial(y = 0, pi = 1/36, N = 24)
x <- 0:24
y <- pdf_binomial(x, pi = 1/36, N = 24) * 100
plot(x, y, type = "l", xlab = "Number of success",
ylab = "Probability (%)",
xaxs = "i",
yaxs = "i",
ylim = c(0, 50))
polygon(c(x[x >= 1], 1), c(y[x >= 1], 0), col = "red")
polygon(c(0, x[x <= 1], 1), c(0, y[x <= 1], 0), col = "cadetblue")
legend("topright", c("P(Y < 1)", "P(Y >= 1)"),
col = c("cadetblue", "red"), pch = 22, pt.bg = c("cadetblue", "red"),
bty = "n")
my_data <- read_csv("https://goo.gl/Vn5uZi")
languageR::pairscor.fnc(my_data)
ggplot(my_data, aes(x = elev, y = slope)) +
geom_point() +
geom_smooth(method = "lm")
lm_1 <- lm(slope ~ elev, data = my_data)
summary(lm_1)
glm_gaussian <- glm(slope ~ elev, data = my_data, family = "gaussian")
summary(glm_gaussian)
coef(lm_1)
coef(glm_gaussian)
p <- ggplot(mpg, aes(x = displ, y = cyl)) +
geom_point()
p
glm_poisson <- glm(cyl ~ displ, data = mpg, family = "poisson")
predicted_poisson <- predict(glm_poisson, type = "response")
head(predicted_poisson)
p + geom_line(aes(x = mpg$displ, y = predicted_poisson), color = "red")
summary(glm_poisson)
exp(coef(glm_poisson))
mpg
df <- mutate(mpg, predicted = predicted_poisson) %>%
dplyr::select(displ, cyl, predicted) %>%
filter(displ %in% c(2,3,4,5,6)) %>%
unique() %>%
arrange(displ)
mpg
mutate(mpg, predicted = predicted_poisson)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
dev = "svg",
fig.width = 7,
fig.height = 5,
fig.align = "center",
tidy = TRUE,
tidy.opts = list(width.cutoff = 50)
)
library(ggplot2)
library(dplyr)
library(vegan)
library(readr)
library(extrafont)
loadfonts(quiet = TRUE)
theme_set(theme_bw(base_size = 16, base_family = "Open Sans"))
#options(width = 10)
s0 <- knitr::knit_hooks$get('source')
o0 <- knitr::knit_hooks$get('output')
knitr::knit_hooks$set(
list(
source =
function(x, options) {
if (is.null(options$class)) {
s0(x, options)
} else {
paste0(
paste0("<div class='", options$class, "'><pre><code>"),
x, "</code></pre>\n"
)
}
}, output = function(x, options) {
if (is.null(options$class)) {
o0(x, options)
} else {
paste0(
"<pre><code>",
x, "</code></pre></div>\n"
)
}
}
)
)
set.seed(1)
df <- tibble(x = 10 * rnorm(1000))
ggplot(df, aes(x = x)) +
geom_histogram(aes(y = ..density..),
# breaks = seq(-50, 50, by = 10),
colour = "black",
fill = "white",
size = 0.25
) +
stat_function(fun = dnorm, args = list(mean = mean(df$x), sd = sd(df$x)), colour = "red") +
scale_x_continuous(limits = c(-40, 40))
temperature <- read_csv("data/temp_roskilde_2015.csv")
temperature <- janitor::clean_names(temperature)
temperature$cet <- as.Date(temperature$cet, format = "%Y-%m-%d")
print(xtable::xtable(head(temperature[, 1:7], 10)),
type = "html", NA.string = "NA")
ggplot(temperature, aes(x = cet, y = mean_temperature_c)) +
geom_point() +
geom_smooth(method = "loess") +
scale_x_date()
par(mfrow = c(1,2))
hist(temperature$mean_temperature_c, xlab = "Temperature (C)",
main = "Histogram of temperature")
hist(temperature$mean_temperature_c, freq = FALSE,
main = "Normal probability curve",
xlab = "Temperature (C)")
lines(density(temperature$mean_temperature_c, na.rm = TRUE), col = "red", lwd = 3)
# Function to calculate PDF
pdf_normal <- function(x, sd, u){
y <- (1 / (sd * sqrt(2 * pi))) * exp(-(((x - u)^2)/(2 * sd^2)))
return(y)
}
# Average
u <- mean(temperature$mean_temperature_c, na.rm = TRUE)
# Standard deviation
sd <- sd(temperature$mean_temperature_c, na.rm = TRUE)
prob <- pdf_normal(x = temperature$mean_temperature_c, sd = sd, u = u)
hist(temperature$mean_temperature_c, freq = FALSE, xlab = "Temperature (C)", main = "")
i <- order(temperature$mean_temperature_c)
lines(temperature$mean_temperature_c[i], prob[i], col = "orange", lwd = 2)
lines(density(temperature$mean_temperature_c, na.rm = TRUE), col = "red", lwd = 3)
legend("topright", c("Theoretical PDF", "Observed PDF"),
col = c("orange", "red"), lwd = 2, bty = "n"
)
par(mar = c(4, 4, 1, 2))
temp <- -100:100 # Vector of extreme temperatures
y <- pdf_normal(temp, sd, u)
plot(temp, y * 100,
type = "l", xlab = "Temperature (C)",
ylab = "Probability (%)", col = "red", lwd = 2
)
pdf_normal(-100, sd, u) * 100
pdf_normal(25, sd, u) * 100
hist(mtcars$qsec, freq = FALSE)
sd <- sd(mtcars$qsec)
u <- mean(mtcars$qsec)
pdf_normal(18, sd, u)
dnorm(18, mean = u, sd = sd)
# Poisson distribution function
pdf_poisson <- function(y, u){
prob <- (u^y * exp(-u)) / factorial(y)
return(prob)
}
pdf_poisson(y = 0, u = 2)
pdf_poisson(y = 0, u = 2) + pdf_poisson(y = 1, u = 2) +
pdf_poisson(y = 2, u = 2) + pdf_poisson(y = 3, u = 2)
dpois(0, 2) + dpois(1, 2) + dpois(2, 2) + dpois(3, 2)
x <- 0:10
y <- dpois(x, 2) * 100
plot(x, y, type = "l", xlab = "Number of email per day",
ylab = "Probability (%)",xaxs="i",yaxs="i", ylim = c(0, 30))
polygon(c(0, x[x <= 3], 3), c(0, y[x <= 3], 0), col = "cadetblue")
legend("topright", c("P(Y <= 3)"),
col = c("cadetblue"), pch = 22, pt.bg = c("cadetblue"),
bty = "n")
1 - dpois(0, 2) - dpois(1, 2) - dpois(2, 2) - dpois(3, 2)
x <- 0:10
y <- dpois(x, 2) * 100
plot(x, y,
type = "l", xlab = "Number of email per day",
ylab = "Probability (%)", xaxs = "i", yaxs = "i", ylim = c(0, 30)
)
polygon(c(x[x >= 4], 4), c(y[x >= 4], 0), col = "red")
polygon(c(0, x[x <= 4], 4), c(0, y[x <= 4], 0), col = "cadetblue")
legend("topright", c("P(Y < 4)", "P(Y >= 4)"),
col = c("cadetblue", "red"), pch = 22, pt.bg = c("cadetblue", "red"),
bty = "n"
)
par(mfrow = c(2,2), mar = c(4,4,2,1))
plot(0:10, dpois(0:10, 1), type = "h", xlab = "Y values", ylab = "Probability",
main = expression(paste(mu, "= 1")))
plot(0:10, dpois(0:10, 5), type = "h", xlab = "Y values", ylab = "Probability",
main = expression(paste(mu, "= 5")))
plot(0:40, dpois(0:40, 10), type = "h", xlab = "Y values", ylab = "Probability",
main = expression(paste(mu, "= 10")))
plot(50:150, dpois(50:150, 100), type = "h", xlab = "Y values", ylab = "Probability",
main = expression(paste(mu, "= 100")))
par(mfrow = c(2,2), mar = c(4,4,2,1))
plot(dnbinom(0:100, size = 1e05, mu = 100), type = "h", xlab = "Y values",
ylab = "Probability", main = expression(paste(mu, "= 100", " k = 1e05")))
plot(dnbinom(0:100, size = 1, mu = 100), type = "h", xlab = "Y values",
ylab = "Probability", main = expression(paste(mu, "= 100", " k = 1e05")))
plot(dnbinom(0:100, mu = 10, size = 10), type = "h", xlab = "Y values",
ylab = "Probability", main = expression(paste(mu, "= 10", " k = 10")))
plot(dnbinom(0:100, mu = 10, size = 1), type = "h", xlab = "Y values",
ylab = "Probability", main = expression(paste(mu, "= 10", " k = 1")))
par(mfrow = c(1,2))
plot(dnbinom(0:100, mu = 50, size = 10000), type = "h", xlab = "Y values",
ylab = "Probability",
main = expression(paste("Negative binomial ", mu, "= 50", " k = 10000")))
plot(dpois(0:100, 50), type = "h", xlab = "Y values",
ylab = "Probability", main = expression(paste("Poisson ", mu, "= 50")))
y <- seq(0.01, 10, length.out = 100)
plot(y, dgamma(y, shape = 6, rate = 2), type = "l", xlab = "Y values",
ylab = "Probability", main = expression(paste(mu, "= 12 ", nu, " = 6")))
pdf_binomial <- function(y, pi, N){
prob <- factorial(N) / (factorial(y) * factorial((N - y))) *
pi^y * (1 - pi)^(N - y)
return(prob)
}
# Prob of having 1 (head) with a success rate of 50% after 1 trial
pdf_binomial(1, pi = 0.5, N = 1)
prob <- pdf_binomial(1:10, pi = 0.5, N = 1:10)
plot(1:10, prob * 100, type = "h", ylab = "Probabilities (%)",
xlab = "Number of successive trial")
pdf_binomial(y = 8, pi = 0.5, N = 10)
pdf_binomial(y = 3, pi = 1/6, N = 4)
sum(pdf_binomial(y = 1:24, pi = 1/36, N = 24))
# The probability of failing (i.e. 0 success)
pdf_binomial(y = 0, pi = 1/36, N = 24)
# Then the probability of success 1, 2, 3, ...
1 - pdf_binomial(y = 0, pi = 1/36, N = 24)
x <- 0:24
y <- pdf_binomial(x, pi = 1/36, N = 24) * 100
plot(x, y, type = "l", xlab = "Number of success",
ylab = "Probability (%)",
xaxs = "i",
yaxs = "i",
ylim = c(0, 50))
polygon(c(x[x >= 1], 1), c(y[x >= 1], 0), col = "red")
polygon(c(0, x[x <= 1], 1), c(0, y[x <= 1], 0), col = "cadetblue")
legend("topright", c("P(Y < 1)", "P(Y >= 1)"),
col = c("cadetblue", "red"), pch = 22, pt.bg = c("cadetblue", "red"),
bty = "n")
my_data <- read_csv("https://goo.gl/Vn5uZi")
languageR::pairscor.fnc(my_data)
ggplot(my_data, aes(x = elev, y = slope)) +
geom_point() +
geom_smooth(method = "lm")
lm_1 <- lm(slope ~ elev, data = my_data)
summary(lm_1)
glm_gaussian <- glm(slope ~ elev, data = my_data, family = "gaussian")
summary(glm_gaussian)
coef(lm_1)
coef(glm_gaussian)
p <- ggplot(mpg, aes(x = displ, y = cyl)) +
geom_point()
p
glm_poisson <- glm(cyl ~ displ, data = mpg, family = "poisson")
predicted_poisson <- predict(glm_poisson, type = "response")
head(predicted_poisson)
p + geom_line(aes(x = mpg$displ, y = predicted_poisson), color = "red")
summary(glm_poisson)
exp(coef(glm_poisson))
df <- mutate(mpg, predicted = predicted_poisson) %>%
dplyr::select(displ, cyl, predicted) %>%
filter(displ %in% c(2,3,4,5,6)) %>%
unique() %>%
arrange(displ)
rmarkdown::render("08_glm.Rmd")
rmarkdown::render("09_spatial_autocorrelation.Rmd")
rmarkdown::render("09_spatial_autocorrelation.Rmd", envir = new.env())
rmarkdown::render("01_introduction_course.Rmd", envir = new.env())
rmarkdown::render("02_introduction_r.Rmd", envir = new.env())
rmarkdown::render("03_introduction_data_manipulation.Rmd", envir = new.env())
rmarkdown::render("04_introduction_ggplot2.Rmd", envir = new.env())
rmarkdown::render("05_introduction_basic_analysis.Rmd", envir = new.env())
rmarkdown::render("06_pca.Rmd", envir = new.env())
rmarkdown::render("07_rda.Rmd", envir = new.env())
rmarkdown::render("08_glm.Rmd", envir = new.env())
rmarkdown::render("09_spatial_autocorrelation.Rmd", envir = new.env())
rmarkdown::render("09_spatial_autocorrelation.Rmd", envir = new.env())
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
dev = "svg",
fig.width = 7,
fig.height = 5,
fig.align = "center",
tidy = TRUE,
tidy.opts = list(width.cutoff = 50)
)
library(tidyverse)
library(extrafont)
loadfonts(quiet = TRUE)
theme_set(theme_bw(base_size = 16, base_family = "Open Sans"))
library(ape)
library(pgirmess)
library(nlme)
library(sjPlot)
set.seed(1)
par(mfrow = c(1, 3))
m <- matrix(0, 9, 9)
m[1:4, ] <- 1
image(m, col = 0:1, xlim = c(-.05, .93), ylim = c(-.05, .93), main = "Positive spatial autocorrelation", cex.main = 2.5, cex.axis = 2, xaxt = "n", yaxt = "n")
image(matrix(1:0, 9, 9), col = 0:1, xlim = c(-.05, .93), ylim = c(-.05, .93), main = "Negative spatial autocorrelation", cex.main = 2.5, cex.axis = 2, xaxt = "n", yaxt = "n")
image(matrix(sample(c(0, 1), 81, replace = TRUE), 9, 9), col = 0:1, xlim = c(-.05, .93), ylim = c(-.05, .93), main = "No spatial autocorrelation", cex.main = 2.5, cex.axis = 2, xaxt = "n", yaxt = "n")
set.seed(1)
par(mfrow = c(1, 3))
m <- matrix(0, 9, 9)
m[1:4, ] <- 1
image(m, col = 0:1, xlim = c(-.05, .93), ylim = c(-.05, .93), main = "Positive spatial autocorrelation", cex.main = 2.5, cex.axis = 2, xaxt = "n", yaxt = "n", sub = "Positive I", cex.sub = 4)
image(matrix(1:0, 9, 9), col = 0:1, xlim = c(-.05, .93), ylim = c(-.05, .93), main = "Negative spatial autocorrelation", cex.main = 2.5, cex.axis = 2, xaxt = "n", yaxt = "n", sub = "Negative I", cex.sub = 4)
image(matrix(sample(c(0, 1), 81, replace = TRUE), 9, 9), col = 0:1, xlim = c(-.05, .93), ylim = c(-.05, .93), main = "No spatial autocorrelation", cex.main = 2.5, cex.axis = 2, xaxt = "n", yaxt = "n", sub = "I around 0", cex.sub = 4)
df <- read_table2("data/bird.diversity.txt") # Load tidyverse first
df <- janitor::clean_names(df) # Clean column names
df
ggplot(df, aes(x = tree_diversity, y = bird_diversity)) +
geom_point(size = 3) +
geom_smooth(method = "lm")
ggplot(df, aes(x = lon_x, y = lat_y, size = bird_diversity)) +
geom_point()
df %>%
dplyr::select(-site, -tree_diversity) %>%
languageR::pairscor.fnc()
sample_distances <- as.matrix(dist(cbind(df$lon_x, df$lat_y)))
sample_distances_inv <- 1 / sample_distances
diag(sample_distances_inv) <- 0
sample_distances_inv[1:6, 1:6] # Show a subset of the data
moran <- Moran.I(df$bird_diversity, sample_distances_inv)
moran
-1/(nrow(df) -1) # Expected Moran's I
clog <- correlog(df[, c("lon_x", "lat_y")], z = df$bird_diversity)
plot(clog)
library(spdep)
nb_to_df <- function(nb, coords) {
x <- coords[, 1]
y <- coords[, 2]
n <- length(nb)
cardnb <- card(nb)
i <- rep(1:n, cardnb)
j <- unlist(nb)
return(data.frame(
x = x[i], xend = x[j],
y = y[i], yend = y[j]
))
}
distan <- dnearneigh(as.matrix(df[, c("lon_x", "lat_y")]), 0.1185693, 0.5618655)
df2 <- nb_to_df(distan, as.matrix(df[, c("lon_x", "lat_y")]))
ggplot() +
geom_segment(aes(
x = x,
xend = xend,
y = y,
yend = yend
), size = 0.1, alpha = 0.5,
data = df2) +
geom_point(data = df, aes(x = lon_x, y = lat_y), color = "red") +
xlab("Longitude") +
ylab("Latitude")
# Simple lm model to predict bird diversity
mod_null <- lm(bird_diversity ~ tree_diversity, data = df)
tab_model(mod_null)
mod_lon_lat <- lm(bird_diversity ~ tree_diversity + lon_x * lat_y, data = df)
tab_model(mod_lon_lat)
AIC(mod_null, mod_lon_lat)
# Create a null model
mod <- gls(bird_diversity ~ 1, data = df)
# Calculate the variogram on the model
semivario <-
Variogram(mod, form = ~ lon_x + lat_y, resType = "normalized")
# Calculate the variogram on the model
semivario <-
Variogram(mod, form = ~ lon_x + lat_y, resType = "normalized")
----
```{r, fig.width=4, fig.height=3}
plot(semivario, smooth = TRUE)
# Model without spatial structure
mod1 <- gls(bird_diversity ~ tree_diversity, data = df)
# Model with Gaussian structure
mod_gaus <-
gls(
bird_diversity ~ tree_diversity,
correlation = corGaus(form = ~ lon_x + lat_y, nugget = TRUE),
data = df
)
# Model with a Linear structure
mod_lin <-
gls(
bird_diversity ~ tree_diversity,
correlation = corLin(form = ~ lon_x + lat_y, nugget = TRUE),
data = df
)
# Model with a Linear structure
mod_lin <-
gls(
bird_diversity ~ tree_diversity,
correlation = corLin(form = ~ lon_x + lat_y, nugget = TRUE),
data = df
)
----
```{r, tidy=FALSE}
semivario <- Variogram(mod_gaus, form = ~lon_x + lat_y, resType = "normalized")
plot(semivario, smooth = TRUE)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
rmarkdown::render("03_introduction_data_manipulation.Rmd", envir = new.env())
git rm --cached .Rproj.user/
git rm -r --cached .Rproj.user/
git rm -r --cached
git rm -r --cached
git rm -r --cached path-to-those-files
rmarkdown::render("07_rda.Rmd", envir = new.env())
