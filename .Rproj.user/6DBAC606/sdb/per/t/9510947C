{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Efficient data visualisation with ggplot2\"\nbibliography: /home/persican/Documents/library.bib\noutput:\n  revealjs::revealjs_presentation:\n    incremental: true\n    theme: moon\n    transition: convex\n    highlight: zenburn\n    center: true\n    self_contained: true\n    fig_width: 5\n    fig_height: 4\n    fig_caption: false\n    css: styles.css\n    keep_md: yes\n---\n\n```{r setup, include = FALSE}\n\nlibrary(svglite)\n\nknitr::opts_chunk$set(message = FALSE, \n                      warning = FALSE, \n                      dev = \"svg\", \n                      fig.ext = \".svg\",\n                      fig.width = 5, \n                      fig.height = 4,\n                      fig.align = \"center\")\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(readr)\nlibrary(tidyr)\n\nlibrary(extrafont)\nloadfonts(quiet = TRUE)\n\n\ntheme_set(theme_bw(base_size = 16, base_family = \"Open Sans\"))\n```\n\n## Data visualization\n\n- Important aspect in data sciences -> Communicate information clearly and efficiently to the community.\n\n- Powerful tool to discovers patterns in the data.\n\n- It makes complex data more accessible -> **reveal data**.\n\n- Bad graphics can be a reason for paper rejection!\n\n- A picture is worth a thousand words.\n    + Always, always, always plot the data!\n    + When possible, replace tables with figures that are more compelling.\n\n## What is a good graph?\n\n## Data-ink ratio\n\nThe data-ink ratio is the proportion of ink that is used to present actual data compared to the total amount of ink used in the entire display.\n\n<br>\n\n$$\n\\verb|data-ink ratio| = \\frac{\\verb|Data-ink|}{\\verb|Total ink used to print the graphic|}\n$$\n\nThe data-to-ink ratio should be keep as high as possible.\n\n<br>\n\n## Examples\n\n```{r, echo = FALSE}\ndf <- data.frame(x = 1:4, y = 1:4)\n\np <- ggplot(df, aes(x, y)) +\n  geom_bar(stat=\"identity\") +\n  theme(panel.background = element_rect(fill = \"gray\"))\np\n```\n\n## Examples\n\n```{r, echo = FALSE, fig.width = 10}\np2 <- p + theme_bw()\ngridExtra::grid.arrange(p, p2, ncol = 2)\n```\n\n## How to lie with graphs\n\nIt is easy to exaggerate effects or distort the reality with graphs.\n\n> *Gee-Whiz graphs* are popular where people want to influence more than inform [@Herne1973].\n\n## Examples\n\n```{r, echo = FALSE, fig.width = 10}\n\nset.seed(1234)\n\nx <- seq(1, 100, length.out = 100)\ny <- 200 + 2 * x + rnorm(x, sd = 30)\n\ndf <- data.frame(x = x, y = y)\n\np1 <- ggplot(df, aes(x = x, y = y)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  ylim(0, 600)\n\np2 <- ggplot(df, aes(x = x, y = y)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\ngridExtra::grid.arrange(p1, p2, ncol = 2)\n```\n\n## Examples\n\n<center>\n<figure>\n  <img src=\"http://www.fallacyfiles.org/BushCuts.png\">\n<figcaption>It seems that the second bar is 3 times higher than the first bar.</figcaption>\n</figure>\n</center>\n\n## Examples\n\n<center>\n<figure>\n  <img src=\"https://www.calvin.edu/academic/economics/faculty/bios/HaneyDocs/attach/59838668/Gee.png\" width = \"400\">\n</figure>\n</center>\n\n<center>\n<figure>\n  <img src=\"https://www.calvin.edu/academic/economics/faculty/bios/HaneyDocs/attach/59838668/Whiz.png\" width = \"400\">\n</center>\n\n\n## Do not use 3D, ever!\n\n3D graphics are very rarely useful:\n\n1. First, they break the data-to-ink ratio rule.\n\n2. Secondly, they can distort the reality.\n\n## Examples\n\n#### What is the value of C?\n\n<center>\n<figure>\n  <img src=\"http://www.consultantjournal.com/wp-content/uploads/chart%201.jpg\">\n<figcaption>Source: http://consultantjournal.com/blog/use-3d-charts-at-your-own-risk</figcaption>\n</figure>\n</center>\n\n\n## Examples\n\n<center>\n<figure>\n  <img src=\"http://www.consultantjournal.com/wp-content/uploads/chart%202.jpg\">\n<figcaption>Source: http://consultantjournal.com/blog/use-3d-charts-at-your-own-risk</figcaption>\n</figure>\n</center>\n\nThe value of C is 3...\n\n## Examples\n\n#### What is the value of $y$ at $z = \\text{low}$ and $x = \\text{t1}$?\n\n```{r 3d_bar, echo = FALSE}\ndf <- data.frame(x = c(\"t1\", \"t1\", \"t1\", \"t2\", \"t2\", \"t2\", \"t3\", \"t3\", \"t3\"),\n                 y = c(5, 2, 4, 8, 1, 3, 50, 12, 35),\n                 z = c(\"high\", \"low\", \"med\", \"high\", \"low\", \"med\", \"high\", \"med\", \"low\"))\n\nlattice::cloud(y ~ x + z,\n      df,\n      panel.3d.cloud = latticeExtra::panel.3dbars,\n      col.facet='grey', \n      xbase = 0.4,\n      ybase = 0.4,\n      scales = list(arrows = FALSE, col = 1), \n      par.settings = list(axis.line = list(col = \"transparent\")))\n```\n\n----\n\n```{r, echo = FALSE, fig.width=10}\np1 <- lattice::cloud(y ~ x + z,\n               df,\n               panel.3d.cloud = latticeExtra::panel.3dbars,\n               col.facet='grey', \n               xbase = 0.4,\n               ybase = 0.4,\n               scales = list(arrows = FALSE, col = 1), \n               par.settings = list(axis.line = list(col = \"transparent\")))\n\np2 <- ggplot(df, aes(x = x, y = y, fill = z)) +\n  geom_bar(stat=\"identity\", position = \"dodge\")\n\ngridExtra::grid.arrange(p1, p2, ncol = 2)\n```\n\n## Top 3 of bad graphs\n\n<center>\nSource: http://bit.ly/1OnKlEi\n</center>\n\n----\n\n<center>\n<img src=\"https://www.biostat.wisc.edu/~kbroman/topten_worstgraphs/roeder_fig4.jpg\" alt=\"HTML5 Icon\" style=\"height:640px;\">\n</center>\n\n----\n\n<center>\n<img src=\"https://www.biostat.wisc.edu/~kbroman/topten_worstgraphs/wittke_thompson_fig1CD.jpg\" alt=\"HTML5 Icon\" style=\"height:640px;\">\n</center>\n\n----\n\n<center>\n<img src=\"https://www.biostat.wisc.edu/~kbroman/topten_worstgraphs/kim_fig1.png\" alt=\"HTML5 Icon\" style=\"height:640px;\">\n</center>\n\n## ggplot2\n\n## ggplot2\n\n- ggplot2 is an extremely powerful package based on the grammar of graphics to produce complicated graphics in an elegant manner.\n\n- ggplot2 works best when you have **tidy data**.\n\n- Graphics are built by combining layers.\n\n- You can refer to the printed **cheat sheet** for an overview of the package's functions.\n\n## Butterfly\n\n```{r, echo = FALSE, message=FALSE, warning=FALSE, cache=TRUE}\nsource(\"https://raw.githubusercontent.com/danielmarcelino/SciencesPo/master/R/butterfly.R\")\nbutterfly(nb = 1000)\n```\n\nSource: https://goo.gl/L6cyaQ\n\n## ggplot2\n\nggplot2 is not part of base R, so it needs to be installed.\n\n```{r, eval = FALSE}\ninstall.packages(\"ggplot2\") # Install the package\n\nlibrary(ggplot2) # Load the package\n```\n\n## The data\n\nFor the following examples we are going to use the data from the `mpg` dataset. This dataset contains a subset of the fuel economy data that the EPA makes available on http://fueleconomy.gov. \n\n<small>\n```{r, echo = FALSE, results=\"asis\"}\nprint(xtable::xtable(head(mpg, 10)), type = \"html\", NA.string = \"NA\")\n```\n</small>\n\n## Basic structure\n\n![alt text](myfigs/ggplot2.svg)\n\n## geoms \n\n*geoms* is the short for geometric objects which are used to specify which type of graphic you want to produce (boxplot, barplot, scatter, ...).\n\n```{r, echo = FALSE}\nls(pattern = '^geom_', env = as.environment('package:ggplot2'))\n```\n\n## One variable graphics\n\nThere are two main types of one variable graphics:\n\n| **Graphic type** | **Geom**           | **Description**                          |\n|------------------|--------------------|------------------------------------------|\n| Histrogram       | `geom_histogram()` | Produces histograms for continuous data. |\n| Barplot          | `geom_bar()`       | Produces histograms for discrete data.   |\n\n## Histogram\n\n```{r, fig.height = 4, fig.width = 5}\n# First create the mapping.\np <- ggplot(data = mpg, mapping = aes(x = cty))\n\n# Then add one histogram layer (geom) with no parameters.\np + geom_histogram()\n```\n\n## Histogram\n\n```{r}\n# Specify a binwidth of 5 miles per gallon.\np + geom_histogram(binwidth = 5)\n```\n\n## Exercise {.exercises}\n\n#### Exercise #1\n\nCreate an histogram of the `displ` variable and change the default color of the bars to red.\n\nHint: \n\n```{r, eval = FALSE}\n?geom_histogram\n```\n\n## Barplot\n\n```{r, fig.width = 8, fig.height = 4}\nggplot(data = mpg, mapping = aes(x = class)) + \n  geom_bar()\n```\n\n## Two variables graphics\n\nTwo variables graphics are more commmon. \n\n| **Graphic type** | **Geom**         | **Description**                            |\n|------------------|------------------|--------------------------------------------|\n| Scatter plot     | `geom_point()`   | Produces scatter plot between $x$ and $y$. |\n| Line plot        | `geom_line()`    | Produces line plot between $x$ and $y$.    |\n| Boxplot          | `geom_boxplot()` | Boxplot between $x$ and $y$.               |\n\n## Scatter plot\n\n```{r}\n# First, create the mapping\np <- ggplot(mpg, aes(x = displ, y = hwy))\n\n# Then, tell ggplot2 we want points for the relation between x and y.\np + geom_point()\n```\n\n## Line plot\n\n```{r}\n# First, create the mapping\np <- ggplot(mpg, aes(x = displ, y = hwy))\n\n# Then, tell ggplot2 we want lines for the relation between x and y.\np + geom_line()\n```\n\n## Exercise {.exercises}\n\n#### Exercise #1\n\nCreate a scatter plot between `hwy` (**x**) and `cty` (**y**). Change the color of the points to blue and the size to 4.\n\n## Boxplot\n\n> In descriptive statistics, a box plot or boxplot is a convenient way of graphically depicting groups of numerical data through their quartiles (Wikipedia).\n\nTo make a boxplot, we need to have a **discrete/categorical** variable on $x$ and a **continuous** variable on $y$.\n\n## Boxplot\n\n```{r, fig.width = 8}\nggplot(data = mpg, mapping = aes(x = class, y = cty)) + \n  geom_boxplot() # boxplot geom with no parameters\n```\n\n## Exercise {.exercises}\n\n#### Exercise #1\n\nCreate a boxplot using the following code:\n\n```{r, fig.height = 3.5}\nggplot(data = mpg, mapping = aes(x = cyl, y = hwy)) + \n  geom_boxplot() # boxplot geom with no parameters\n```\n\n## Working with colors\n\nIt can be useful to add colors in graphics. To change the colors of the points, we have to use the color parameter. \n\n```{r, fig.height=3.5}\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point(color = \"red\")\n```\n\n## Working with colors\n\nIf we want to set a color based on a variable, we have to use the aesthetic:\n`aes(colour = variable)`.\n\n```{r, fig.height=3.5}\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point(aes(color = class))\n```\n\n## Working with size\n\nIn the same manner, the size of the dots can be based on a particular variable.\n\n```{r, fig.height=3.5}\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point(aes(size = factor(cyl)))\n```\n\n## Exercise {.exercises}\n\n#### Exercise #1\n\nTry to reproduce this graphic.\n\n```{r, fig.width = 8, echo = FALSE}\nggplot(data = mpg, mapping = aes(x = class, y = cty)) + \n  geom_boxplot(aes(fill = class))\n```\n\nWhat is wrong with this graphic?\n\n## Faceting\n\n## Faceting\n\nFaceting is a very powerful of the ggplot2 library which allows to display additional categorical variables in facets.\n\nThere are two types of faceting: `facet_grid()` and `facet_wrap()`.\n\n## 1D facets\n\n```{r, fig.width = 7}\nggplot(mpg, aes(x = displ, y = cty)) + # Mapping\n  geom_point() + # We want a scatter plot\n  facet_wrap(~class) # We want 1 panel for each class\n```\n\n## 1D facets\n\n```{r, fig.width = 7}\nggplot(mpg, aes(x = displ, y = cty)) + # Mapping\n  geom_point() + # We want a scatter plot\n  facet_wrap(~class, scale = \"free\") # We want 1 panel for each class\n```\n\n## 2D facets\n\n2D facet graphics are made using the `facet_grid()` function.\n\n```{r, eval = FALSE}\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  facet_grid(cyl ~ class) # number of cyl as a function of class\n```\n\n----\n\n```{r, fig.width=10, fig.height=6}\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  facet_grid(cyl ~ class) # number of cyl as a function of class\n```\n\n## Graphics appearance\n\n## Graphics appearance\n\nThere are a ton of options to modify the look and feel of your graphics and we can not go through them all in short period of time.\n\n**Book:** *ggplot2: Elegant Graphics for Data Analysis (Use R!)*\n\nHere I present the principal functions I usually use to make publication-ready graphics.\n\n## Graphics appearance\n\n\n```{r, eval = FALSE}\nggplot(mpg, aes(x = displ, y = cty)) + \n  geom_point(colour = factor(cyl)) + # Scatterplot color based on cyl\n  \n  stat_smooth(method = \"lm\") + # Add a linear smoother to the data\n  \n  labs(colour = \"Number of\\ncylinders\") + # Title of the color legend\n  \n  xlab(\"Horsepower\") + # Change x-axis title\n  \n  ylab(\"Miles per gallon\") + # Change y-axis title\n  \n  ggtitle(\"This is my title\") + # Add a title on top of the plot\n  \n  theme(legend.position = \"top\") + # Change legend position\n  \n  xlim(0, 8) # Change limits of x-axis\n```\n\n----\n\n```{r, echo = FALSE, fig.width=8, fig.height=6}\n# Create the aes\nggplot(mpg, aes(x = displ, y = cty, colour = factor(cyl))) + \n  geom_point() + # scatterplot\n  stat_smooth(method = \"lm\") + # add a linear smoother to the data\n  labs(colour = \"Number of\\ncylinders\") + # Change color legend\n  xlab(\"Horsepower\") + # Change x-axis title\n  ylab(\"Miles per gallon\") + # Change y-axis title\n  ggtitle(\"This is my title\") + # Add a title on top of the plot\n  theme(legend.position = \"top\") + # Change legend position\n  xlim(0, 8) # Change limits of x-axis\n```\n\n## Saving your graphic\n\nSaving your pretty ggplot2 graphics is pretty easy with the `ggsave()` function.\n\n```{r, eval = FALSE}\np <- ggplot(mpg, aes(x = displ, y = cty)) +\ngeom_point()\n\n# Vector formats\nggsave(\"path/to/myfile.pdf\", p, width = 5.97, height = 4.79)\nggsave(\"path/to/myfile.eps\", p, width = 5.97, height = 4.79)\nggsave(\"path/to/myfile.ps\", p, width = 5.97, height = 4.79)\n\n# Raster formats\nggsave(\"path/to/myfile.jpg\", p, width = 5.97, height = 4.79)\nggsave(\"path/to/myfile.tiff\", p, width = 5.97, height = 4.79)\nggsave(\"path/to/myfile.png\", p, width = 5.97, height = 4.79)\n```\n\n## Exercise {.exercises}\n\n#### Exercise #1\n\nUse the following data and reproduce the plot on the next slide.\n\n```{r}\nagrinio <- read_csv(\"data/T_Agrinio_EM.csv\")\nantalya <- read_csv(\"data/T_Antalya_EM.csv\")\n```\n\nHint #1: Use `bind_rows()` to bind both datasets.\n\nHint #2: Before starting, take time to analyze the graphic and think how you need to format the data and what are the different components of the plot.\n\n<small>\nData source: http://climrun.cyi.ac.cy/?q=csv\n</small>\n\n----\n\n```{r, echo = FALSE, fig.width=10, fig.height=5}\ntemp <- bind_rows(agrinio, antalya)\n\ntemp <- gather(temp, month, temperature, -tplace, -year) %>% \n  mutate(month = extract_numeric(month))\n\nggplot(temp, aes(x = year, y = temperature)) +\n  geom_line(aes(color = tplace)) +\n  facet_wrap(~month) +\n  ggtitle(\"Average temperature between 1961 and 2096\") +\n  ylab(\"Temperature (degree)\") +\n  xlab(\"Years\") +\n  labs(color = \"Place\") +\n  geom_vline(xintercept = 2016, lty = 2, size = 0.25)\n```\n\n## References  {.refsection}\n",
    "created" : 1452494466780.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3512653815",
    "id" : "9510947C",
    "lastKnownWriteTime" : 1452343885,
    "last_content_update" : 1452343885,
    "path" : "/media/persican/Philippe Massicotte/Phil/Postdoctorat/Danemark/courses/numerical ecology/04_introduction_ggplot2.Rmd",
    "project_path" : "04_introduction_ggplot2.Rmd",
    "properties" : {
        "chunk_rendered_width" : "650"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}